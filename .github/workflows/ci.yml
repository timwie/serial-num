on: 
  push:
  schedule:
    # run once a day at 12:00 UTC
    - cron: '0 12 * * *'

name: Continuous integration

jobs:
  test:
    name: Build and test crate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
          - nightly
          - 1.69.0  # MSRV

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain with rustup
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
          targets: thumbv6m-none-eabi

      - name: Use cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo build
        run: cargo build --all-features

      - name: cargo build for non_std
        run: cargo build --target thumbv6m-none-eabi --features bincode,borsh,bytemuck,postcard,rkyv,rkyv-safe,serde

      - name: cargo test with no features
        run: cargo test

      - name: cargo test with all features
        run: cargo test --all-features

      - name: cargo miri test with all features
        if: ${{ matrix.rust == 'nightly' }}
        run: |
          rustup +nightly component add miri
          cargo +nightly miri test --all-features

  fuzzing:
    name: Fuzz-testing crate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - addition
          - increment

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain with rustup
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt, clippy
          targets: thumbv6m-none-eabi

      - name: Use cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz

      - name: cargo fuzz
        run: cargo fuzz run ${{ matrix.target }} -- -runs=16777216

  coverage:
    name: Upload test coverage to Codecov (stable)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain with rustup
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          targets: thumbv6m-none-eabi

      - name: Use cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --ignore-filename-regex tests --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

  lint:
    name: Lint crate (stable)
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain with rustup
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          targets: thumbv6m-none-eabi

      - name: Use cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo fmt
        run: cargo fmt --all -- --check

      - name: cargo clippy
        run: cargo clippy --all-features

  verify:
    name: Model checking
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Run Kani Verifier
        uses: model-checking/kani-github-action@v1
        with:
          args: --all-features

  deny:
    name: Lint dependency crates
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: cargo deny
        uses: EmbarkStudios/cargo-deny-action@v1

  publish:
    name: Upload release to crates.io
    needs: [test, verify, fuzzing, lint, deny]  # do not publish if something fails
    # only run on new tag "v*" on main branch
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - run: cargo publish --token ${CRATES_TOKEN}
        env:
          CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}
